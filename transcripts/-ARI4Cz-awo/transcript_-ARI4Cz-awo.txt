Hey there How&amp;#39;s it going everybody in this video we&amp;#39;ll be going Over the basics of logging in Python now There&amp;#39;s a lot that We can do with logging in Python So I&amp;#39;m actually going to break these up into two separate videos now in this video We&amp;#39;re going to look at how to get started with logging by replacing our print statements with log statements We&amp;#39;re also going to set different logging levels and also log information to files now in the next video we&amp;#39;ll look at how we can use loggers throughout multiple modules and how we can configure the levels so that different information gets sent exactly Where We want it to go um Okay so First of all If you&amp;#39;re not using logs Right now then you should definitely start Trying to work it into your code Wherever It would be useful um Python comes with a logging module built in Uh so there&amp;#39;s no need to install anything Extra a lot of people put off learning good logging habits because it&amp;#39;s easier to sometimes just put in print statements and catch your problems on the Fly and There&amp;#39;s nothing really wrong with that I mean print functions do have their place for sure Uh But logging is definitely something that you&amp;#39;ll need to have in Place once your application grows beyond a basic Project having Good logs in place is going to allow you to Uh you know look at behavior and errors over time and give us A Better overall picture of exactly What&amp;#39;s Going On And you can also pipe it into some visualization Software to get a better perspective ok So with that said Let&amp;#39;s go ahead and get started Uh So I have a file here with some very Super Simple functions and these aren&amp;#39;t really useful for anything but I wanted to start off with something easy so that we can focus on logging instead of What the code is doing So I have four simple functions here just add subtract multiply and Divide and down here at the bottom I&amp;#39;m using two number variables and these are set to 10 and 5 for now and then I&amp;#39;m running through each of these functions and then i have some print statements here that are commented out Okay so If I just run this code as is then it runs successfully with no errors Uh but we don&amp;#39;t really know if it did Everything correctly so in order to print something out to the screen here Let&amp;#39;s uncomment out all of these print statements and Let&amp;#39;s go ahead and rerun that so after We Ran that code We can see that the values that we printed out all showed up in our console down here and Everything looks correct now This is probably How a lot of us check our work as we go but instead of using print statements Let&amp;#39;s look at adding some very basic logging into this Script now First of all We&amp;#39;re going to have to import this and logging is a built-in module so all We have to do is just do import logging And you don&amp;#39;t need to install anything to get that to work ok So before We log anything out Let&amp;#39;s Talk About logging levels Now logging levels allow us to specify exactly what We want to log by separating these into categories now There are five standard logging levels and these are debug info warning error and critical and I have these pulled up in my snippets here so that we can see a description of each of these and I&amp;#39;m just going to copy and paste this into our file here and I just grab this directly from the Python documentation so We can see here that debug says that This is detailed information typically of interest only When diagnosing problems info is confirmation that things are working correctly or working as expected warning is an indication that something unexpected happen or is indicative of some problem Uh Maybe low dis Space and the software is still working as expected then We Get down here to our errors and due to a more serious problem the software has not been able to perform a fun and then critical is a serious error indicating that the program itself May be unable to continue running So I&amp;#39;m just going to leave these commented here as We&amp;#39;re walking through this video so that we can have that as a Visual guide now the default level for logging is set to warning and what that means is that it will capture everything that is a warning or above so by default It will log warning error and critical and that means that It&amp;#39;s going to ignore debug and info log statements so for example down here at the bottom Where We have these print statements Let&amp;#39;s say that we wanted to turn these into debug logging statements So I could just say instead of print here I&amp;#39;m just going to say logging debug and save that now the default behavior for these logging statements is just to log these to the console so Right now It&amp;#39;s very similar to our print statement functionality So now If I run this then you can see that It doesn&amp;#39;t log anything to our console and That&amp;#39;s because the default logging level is warning and it&amp;#39;s only going to log out warnings and higher so it&amp;#39;s not going to Uh log these debug and info statements so instead we need to change Uh so First of all Let&amp;#39;s just say that If WE change these debug here to warning instead and run that now You can see that We get some output to our console now this has a little more information than our print function So this tells us our logging level Which is set to warning um it also has this root here now Don&amp;#39;t worry about that root Right now and what that means We&amp;#39;re going to look at that in our next logging video And now We have the message that we passed into our log here Okay so we&amp;#39;ve logged out some Lines to the console but We&amp;#39;re not really using loging correctly Right now Because we have these set as warnings and they&amp;#39;re not really warnings We really wanted to log these Lines as either debug or info Uh so we need to change our logging level to log those debug and info statements out so do this Let&amp;#39;s go up to the top of our file and We&amp;#39;re going to change some basic configurations here and i&amp;#39;ll just do this below our comments and we can change these basic configurations with the basic config method So I&amp;#39;m going to say logging basic config now This is Camel case And now to change that level We&amp;#39;re going to say level is equal to logging debug now when you set that logging level realize that this debug Here is in all caps now That&amp;#39;s different than our logging debug method um which We Used earlier this logging debug Is All caps and it&amp;#39;s just a constant That&amp;#39;s actually An integer in the background and If I Remember correctly I think that all these constants are increments of 10 So I think debug is actually just 10 infos 20 warnings 30 errors 40 criticals 50 and so on So now that We have our logging level set to debug here now Let&amp;#39;s change all of our warnings Back To debug So I&amp;#39;m going to go down here where we did logging warning and instead I&amp;#39;m going to say logging debug And now Let&amp;#39;s go ahead and rerun this ok So now We can see that It&amp;#39;s printing our debug statements there in the console now So this is good so far But you may have come to this video expecting to see actual log files and not just printing information to the console and log files are a great way to capture information because it allows us to see our logged information over time in one place so instead of logging this information to the console Let&amp;#39;s instead create a log file now to do this it&amp;#39;s just as easy as specifying a file in our basic config method so the Keyword that We&amp;#39;re going to use Here is file name and set that equal to whatever We want our log file to be and I&amp;#39;m just going to call this test log for now and we also need a comma there to separate those keywords ok So now let me rerun this Again now nothing showed up down here in our console Now i&amp;#39;m not sure if you can see my file system very well up here but this new file appeared test log and I&amp;#39;m going to go ahead and Open This up and You can see that it logged all of the information from our Script So now If i go back to my Script and I change these Numbers so instead of 10 and 5 I&amp;#39;m just going to use 20 and 10 and Now If I rerun this and then Open back up this test log now You can see that it has our previous values that Ran and the Uh the latest run here So now We&amp;#39;re going to be able to see our logged information time and over multiple runs ok So one more thing that I want to show you in this basic logging video Is How to change the format and What I mean by the format is If WE Look Back at our log file Here You can see that it has the log level and the logger which We said that We weren&amp;#39;t Going to cover in this video we&amp;#39;ll cover that in the next video and then It has the message here um now to change the format in our log we need to add in some special values to our basic config now to view What is to us I have the options pulled up here Over Here in my Browser now these special format codes Right Here are What is going to allow us to change our format and You can see a description of each of these so We have the Uh Human readable Time We have the file name the level name Uh the Line Numbers the messages and things like that so Let&amp;#39;s say that we wanted to change our logging format to be the time and the level name and then the message So I&amp;#39;m just going to go ahead and cop each these so first I&amp;#39;ll go ahead and grab the time here and copy that And now to set this formatting I&amp;#39;m going to go back to my sample file back up here to the Top and in my basic configuration I&amp;#39;m just going to add in another Keyword and that next Keyword is format and I&amp;#39;m going to set this equal to I&amp;#39;m just going to paste this in What we copied over for the time and then I&amp;#39;m going to separate that with a colon there And now I&amp;#39;ll go back over and grab the level name so We want the name format I&amp;#39;ll copy that and paste that in separate that with a colon and Now we also want the message so I&amp;#39;ll grab the message and go over and paste that in so Now If I save this and i run that And now I go back to my log file now You can see that the format down here with our latest Run The format of our logs Has Changed And now We have the time and this comma Here is just Uh dealing with millisecond data and then We have the log level Which is debug and then We have our message that we printed out ok So now Let&amp;#39;s take a look at another module and add some logging to it real Quick just so that we can walk over all this one more time a little bit more quickly so the module that I have Here is One That I pulled from my object oriented Tutorial series Now If you don&amp;#39;t know how classes work or exactly what this code is doing then Don&amp;#39;t worry about it too much Uh We&amp;#39;re just going to use this as An example to add some logging so just a Quick overview of What&amp;#39;s going on I have this small employee class here and when we create An employee it Comes in here and sets the first name and the last name Uh on the instance and then We&amp;#39;re printing out that we created An employee and then down here at the bottom We&amp;#39;re actually creating two instances of two new employees so with this print statement in here it should tell us When these two instances Are created So I&amp;#39;m going to go ahead and run this code and You can see that it tells us that our two instances were created and we have our print message there ok So now Let&amp;#39;s go ahead and add some logging Let&amp;#39;s say that we wanted to see you know What employees were created over time Uh so We&amp;#39;re going to go through the same process that we did in the other Uh module except We&amp;#39;re just going to go a little faster here so we&amp;#39;ll go ahead and import logging and then we&amp;#39;ll set up our basic configuration I could copy this over from the other file we&amp;#39;ll just go ahead and type this in Real Quick so I&amp;#39;ll say loging basic config and then within here we&amp;#39;ll do a file name we that file equal to employee log now That&amp;#39;s the log file that We&amp;#39;re going to log to now for our level here remember that the default is set to warning um Let&amp;#39;s say um Let&amp;#39;s set this equal to info I think that the Uh our employee creation would be a good info log level And lastly now Let&amp;#39;s go ahead and set the format for Uh our logs so to do this Let&amp;#39;s do format equals and within this string now this one I am going to grab from the other example since these Uh formatting codes can be a little confusing now I&amp;#39;m just going to go ahead and grab the level name and the message here so I&amp;#39;ll copy that and just paste that in there now remember If you want to see everything that is available to you here then they do have this in the Python documentation It is up here in the Python 3 logging Library documentation down here at log record attributes ok So now that We have our login configured here now Let&amp;#39;s replace our PR statement with a log info call so instead of print I&amp;#39;m just going to say logging info and pass in the exact same message and just to make sure that This is working with new information Let&amp;#39;s go ahead and create one more employee down here at the bottom I&amp;#39;ll call this employee 3 and we&amp;#39;ll just call this call her Jane do save that ok So now If I run this code then nothing popped up in our console but Over Here in the file system We have this emplo log I&amp;#39;m going to open that Up And Here You can see that We have all of our logged information Uh at the info level and the Custom formatting that we added in ok So I think that is going to do it for this video Uh we&amp;#39;ve gone over How to use basic logging instead of print statements We also learned about the different log levels and how to change those levels um also How to log to a file and also How to format those log messages so for small applications logging like this will be a good start but There are some issues that we can run into once we start importing our other modules Uh because they all try to Share the same logger um so in the next video we&amp;#39;ll learn how to create separate loggers um add handlers and formatters to those loggers and also how we can log our information to multiple locations And I&amp;#39;ll leave a link to that next video in the description section below Now If Anyone has any questions about what we covered in this video then feel free to ask in the comments section below And I&amp;#39;ll do my best to answer those Now If you enjoy these tutorials and would like to support them then There are several ways You can do that the easiest way is to Simply like the video and give it a thumbs Up and also It&amp;#39;s a huge help to Uh share these videos with Anyone Who you think would find them useful and also if you have the means you can contribute through patreon and There&amp;#39;s a link to that page in the description section below be sure to Subscribe for future videos and thank you all for watching